{"version":3,"sources":["containers/Start/RouteHandle/index.js","js/constants/action-types.js","containers/GetName/index.js","js/actions/index.js","components/Player/index.js","components/SpaceStation/index.js","components/Grid/index.js","containers/GameStage/index.js","containers/MainGame/index.js","containers/routes.js","containers/Start/index.js","App.js","serviceWorker.js","js/reducers/index.js","js/store/index.js","index.js"],"names":["RouteHandle","routes","this","props","Object","keys","map","item","i","disabled","key","exact","path","component","Component","ADD_PLAYERNAME","GetName","state","playerName","tempPlayerName","setPlayerName","bind","changeTempPlayerName","readyForRedirect","findCookieCallSign","event","target","value","setState","Cookies","set","expires","addPlayername","undefined","get","to","className","InputGroup","Input","onChange","placeholder","InputGroupAddon","addonType","Button","onClick","connect","dispatch","type","payload","Player","image","x","y","scale","SpaceStation","Grid","gameWidth","gameHeight","playerLocation","updatePlayerLocation","clickCords","data","global","width","height","options","backgroundColor","interactive","pointerdown","draw","g","beginFill","drawRect","endFill","GameStage","parentDivDimensions","MainGame","isPlayernameSet","renderGameStage","GameDiv","React","createRef","current","offsetWidth","offsetHeight","ref","ROUTES","Start","App","Boolean","window","location","hostname","match","initialState","rootReducer","action","assign","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec67ae36.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Route } from 'react-router-dom'\n\nclass RouteHandle extends Component {\n  render() {\n    const { routes } = this.props;\n    const items = Object.keys(routes);\n    return items.map((item, i) => {\n      if (!routes[item].disabled) {\n        return (\n          <Route\n            key={i}\n            exact\n            path={routes[item].path}\n            component={routes[item].component}\n          />\n        )\n      } else {\n        return null\n      }\n    })\n  }\n}\n\nexport default RouteHandle;\n","export const ADD_PLAYERNAME = \"ADD_PLAYERNAME\"\n","import React, { Component } from \"react\";\nimport { InputGroup, InputGroupAddon, Button, Input } from \"reactstrap\";\nimport \"./styles.css\";\nimport { connect } from \"react-redux\";\nimport { addPlayername } from \"../../js/actions/index\";\nimport { Redirect } from 'react-router-dom'\nimport Cookies from 'js-cookie'\n\nfunction mapDispatch(dispatch) {\n  return {\n    addPlayername: playerName => dispatch(addPlayername(playerName))\n  };\n}\n\nclass GetName extends Component {\n  constructor(props) {\n        super(props);\n        this.state = {\n          playerName: -1\n        }\n\n        this.tempPlayerName = \"\"\n\n        this.setPlayerName = this.setPlayerName.bind(this)\n        this.changeTempPlayerName = this.changeTempPlayerName.bind(this)\n        this.readyForRedirect = this.readyForRedirect.bind(this)\n        this.findCookieCallSign = this.findCookieCallSign.bind(this)\n  }\n\n  changeTempPlayerName(event) {\n    this.tempPlayerName = event.target.value\n  }\n  setPlayerName() {\n    if (this.tempPlayerName !== \"\") {\n      this.setState({playerName: this.tempPlayerName}, () => {\n        const playerName = this.tempPlayerName\n        Cookies.set('callsign', playerName, { expires: 5 })\n        this.props.addPlayername(playerName)\n      })\n    }\n  }\n  findCookieCallSign() {\n    if (Cookies.get('callsign') !== undefined) {\n      this.setState({playerName: this.tempPlayerName}, () => {\n        const playerName = Cookies.get('callsign')\n        this.props.addPlayername(playerName)\n      })\n    }\n  }\n\n  readyForRedirect() {\n    if (this.state.playerName !== -1) {\n      return <Redirect to=\"/game\" />\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"get-name-background\">\n        {this.findCookieCallSign()}\n        {this.readyForRedirect()}\n        <div className=\"username-card\">\n          <h1>Trade Wars!</h1>\n          <InputGroup>\n            <Input onChange={this.changeTempPlayerName} placeholder=\"Username\" />\n            <InputGroupAddon addonType=\"append\">\n              <Button onClick={this.setPlayerName}>Play</Button>\n            </InputGroupAddon>\n          </InputGroup>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default connect(null, mapDispatch)(GetName)\n","import { ADD_PLAYERNAME } from '../constants/action-types'\n\nexport function addPlayername(payload) {\n  return { type: ADD_PLAYERNAME, payload }\n};\n","import { Sprite } from '@inlet/react-pixi';\nimport React, { Component } from \"react\";\n\nclass Player extends Component {\n  render() {\n    return (\n      <Sprite\n        image=\"https://cdn1.iconfinder.com/data/icons/space-133/64/spaceship-planet-space-colony-city-512.png\"\n        x={this.props.x}\n        y={this.props.y}\n        scale={{ x: 0.05, y: 0.05}}\n      />\n    );\n  }\n}\n\nexport default Player\n","import { Sprite } from '@inlet/react-pixi';\nimport React, { Component } from \"react\";\n\nclass SpaceStation extends Component {\n  render() {\n    return (\n      <Sprite\n        image=\"https://www.gfxmag.com/wp-content/uploads/2017/01/satellite-emoji-vector-icon-1.png\"\n        x={this.props.x}\n        y={this.props.y}\n        scale={{ x: 0.5, y: 0.5}}\n      />\n    );\n  }\n}\n\nexport default SpaceStation\n","import { Graphics, Stage } from '@inlet/react-pixi';\nimport React, { Component } from \"react\";\nimport Player from '../Player'\nimport SpaceStation from '../SpaceStation'\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gameWidth: this.props.gameWidth,\n      gameHeight: this.props.gameHeight,\n      playerLocation: {\n        x: 0,\n        y: 0\n      }\n    }\n\n    this.updatePlayerLocation = this.updatePlayerLocation.bind(this)\n  }\n\n  componentDidMount() {\n    this.setState({\n      gameWidth: this.state.gameWidth - (this.state.gameWidth * 0.012),\n      gameHeight: this.state.gameHeight - (this.state.gameHeight * 0.015)\n    })\n  }\n\n  updatePlayerLocation(event) {\n    var clickCords = event.data.global\n    this.setState({playerLocation: clickCords})\n  }\n\n  render() {\n    return (\n      <Stage width={this.state.gameWidth} height={this.state.gameHeight} options={{ backgroundColor: 0x1d2230 }}>\n        <Graphics\n          x={0}\n          y={0}\n          interactive={true}\n          pointerdown={(event) => {this.updatePlayerLocation(event)}}\n          draw={g => {\n            g.beginFill(0x1d2230);\n            g.drawRect(0, 0, this.state.gameWidth, this.state.gameHeight);\n            g.endFill();\n          }}\n        />\n        <SpaceStation x={100} y={100} />\n        <Player x={this.state.playerLocation.x} y={this.state.playerLocation.y} />\n      </Stage>\n    );\n  }\n}\n\nexport default Grid\n","import React, { Component } from \"react\";\nimport Grid from '../../components/Grid'\n\nclass GameStage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.props.parentDivDimensions\n  }\n\n  componentDidMount() {\n    this.setState({\n      gameWidth: this.state.gameWidth - (this.state.gameWidth * 0.012),\n      gameHeight: this.state.gameHeight - (this.state.gameHeight * 0.015)\n    })\n  }\n\n  render() {\n    return (\n      <Grid gameWidth={this.state.gameWidth} gameHeight={this.state.gameHeight} />\n    );\n  }\n}\n\nexport default GameStage\n","import React, { Component } from \"react\";\nimport \"./styles.css\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from 'react-router-dom'\nimport GameStage from '../GameStage'\n\nconst mapStateToProps = state => {\n  return { playerName: state.playerName };\n}\n\nclass MainGame extends Component {\n  constructor(props) {\n        super(props);\n\n        this.state = {\n          gameWidth: -1,\n          gameHeight: -1\n        }\n\n        this.isPlayernameSet = this.isPlayernameSet.bind(this)\n        this.renderGameStage = this.renderGameStage.bind(this)\n        this.GameDiv = React.createRef()\n  }\n\n  isPlayernameSet() {\n    if (this.props.playerName === -1) {\n      return <Redirect to=\"/\" />\n    }\n  }\n\n  componentDidMount () {\n    this.setState({\n      gameWidth: this.GameDiv.current.offsetWidth,\n      gameHeight: this.GameDiv.current.offsetHeight\n    })\n  }\n\n  renderGameStage() {\n    if (this.state.gameWidth !== -1 && this.state.gameHeight !== -1) {\n      return <GameStage parentDivDimensions={this.state} />\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"game-background\">\n        {this.isPlayernameSet()}\n        <h1 className=\"game-title\">Welcome <u><b>{this.props.playerName}</b></u> to Trade Wars</h1>\n        <div className=\"game-window-container\">\n          <div ref={this.GameDiv} className=\"render-container\">\n            {this.renderGameStage()}\n          </div>\n          <div className=\"game-status-container\">\n            <div className=\"game-cargo-container\">\n              <p className=\"game-status-title\">Cargo</p>\n            </div>\n            <div className=\"game-status-text-container\">\n              <p className=\"game-status-title\">Messages</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nMainGame = connect(mapStateToProps)(MainGame)\nexport default MainGame\n","/*\n  {Name of Route}: {\n    path: {the path you want the navigation to go to as a string},\n    component: {the assigned identifier of the imported component from bellow},\n    disabled: {if you want the element to be unclickable put the boolean value true, and null/fasle/don't include for clickable}\n  }\n*/\nimport GetName from './GetName'\nimport MainGame from './MainGame'\n\nconst ROUTES = {\n  GetName: {\n    path: \"/\",\n    component: GetName,\n    disabled: false,\n  },\n  MainGame: {\n    path: \"/game\",\n    component: MainGame,\n    disabled: false,\n  }\n}\n\nexport default ROUTES\n","import React, { Component } from 'react';\nimport { HashRouter as Router } from 'react-router-dom'\nimport RouteHandle from './RouteHandle'\nimport ROUTES from '../routes.js'\n\nclass Start extends Component {\n  render() {\n    return (\n      <Router>\n        <RouteHandle routes={ROUTES}/>\n      </Router>\n    )\n  }\n}\n\nexport default Start;\n","import React from 'react';\nimport './App.css';\nimport Start from './containers/Start'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <Start/>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_PLAYERNAME } from '../constants/action-types'\n\nconst initialState = {\n  playerName: -1\n}\n\nfunction rootReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_PLAYERNAME:\n      return Object.assign({}, state, {\n        playerName: state.playerName = action.payload\n      })\n    default:\n      break\n  }\n  return state\n}\n\nexport default rootReducer\n","import { createStore } from 'redux'\nimport rootReducer from '../reducers/index'\n\nconst store = createStore(rootReducer)\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport store from './js/store'\n\nReactDOM.render((\n  <Provider store={store}>\n    <App />\n  </Provider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}